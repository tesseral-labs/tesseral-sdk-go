// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

// AuditLogEvent represents a record in the Project's audit log.
type AuditLogEvent struct {
	// The Audit Log Event ID. Starts with `audit_log_event_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization the event occurred within, if any.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// The User that performed the event, if any.
	ActorUserID *string `json:"actorUserId,omitempty" url:"actorUserId,omitempty"`
	// The Session that performed the event, if any.
	ActorSessionID *string `json:"actorSessionId,omitempty" url:"actorSessionId,omitempty"`
	// The API Key that performed the event, if any.
	ActorAPIKeyID *string `json:"actorApiKeyId,omitempty" url:"actorApiKeyId,omitempty"`
	// The Backend API key that performed the event, if any.
	ActorBackendAPIKeyID *string `json:"actorBackendApiKeyId,omitempty" url:"actorBackendApiKeyId,omitempty"`
	// The Intermediate Session that performed the action, if any.
	ActorIntermediateSessionID *string `json:"actorIntermediateSessionId,omitempty" url:"actorIntermediateSessionId,omitempty"`
	// When the event occurred.
	EventTime *time.Time `json:"eventTime,omitempty" url:"eventTime,omitempty"`
	// The name of the event.
	EventName *string `json:"eventName,omitempty" url:"eventName,omitempty"`
	// The event payload JSON.
	EventDetails map[string]interface{} `json:"eventDetails,omitempty" url:"eventDetails,omitempty"`
	// Credentials for the actor performing the action. Input-only.
	//
	//	Can be used as a shorthand for actor information when calling CreateAuditLogEvent.
	ActorCredentials *string `json:"actorCredentials,omitempty" url:"actorCredentials,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuditLogEvent) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AuditLogEvent) GetOrganizationID() *string {
	if a == nil {
		return nil
	}
	return a.OrganizationID
}

func (a *AuditLogEvent) GetActorUserID() *string {
	if a == nil {
		return nil
	}
	return a.ActorUserID
}

func (a *AuditLogEvent) GetActorSessionID() *string {
	if a == nil {
		return nil
	}
	return a.ActorSessionID
}

func (a *AuditLogEvent) GetActorAPIKeyID() *string {
	if a == nil {
		return nil
	}
	return a.ActorAPIKeyID
}

func (a *AuditLogEvent) GetActorBackendAPIKeyID() *string {
	if a == nil {
		return nil
	}
	return a.ActorBackendAPIKeyID
}

func (a *AuditLogEvent) GetActorIntermediateSessionID() *string {
	if a == nil {
		return nil
	}
	return a.ActorIntermediateSessionID
}

func (a *AuditLogEvent) GetEventTime() *time.Time {
	if a == nil {
		return nil
	}
	return a.EventTime
}

func (a *AuditLogEvent) GetEventName() *string {
	if a == nil {
		return nil
	}
	return a.EventName
}

func (a *AuditLogEvent) GetEventDetails() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.EventDetails
}

func (a *AuditLogEvent) GetActorCredentials() *string {
	if a == nil {
		return nil
	}
	return a.ActorCredentials
}

func (a *AuditLogEvent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuditLogEvent) UnmarshalJSON(data []byte) error {
	type embed AuditLogEvent
	var unmarshaler = struct {
		embed
		EventTime *internal.DateTime `json:"eventTime,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AuditLogEvent(unmarshaler.embed)
	a.EventTime = unmarshaler.EventTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditLogEvent) MarshalJSON() ([]byte, error) {
	type embed AuditLogEvent
	var marshaler = struct {
		embed
		EventTime *internal.DateTime `json:"eventTime,omitempty"`
	}{
		embed:     embed(*a),
		EventTime: internal.NewOptionalDateTime(a.EventTime),
	}
	return json.Marshal(marshaler)
}

func (a *AuditLogEvent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateAuditLogEventResponse struct {
	AuditLogEvent *AuditLogEvent `json:"auditLogEvent,omitempty" url:"auditLogEvent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateAuditLogEventResponse) GetAuditLogEvent() *AuditLogEvent {
	if c == nil {
		return nil
	}
	return c.AuditLogEvent
}

func (c *CreateAuditLogEventResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateAuditLogEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateAuditLogEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateAuditLogEventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateAuditLogEventResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
