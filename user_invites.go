// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type UserInvitesCreateUserInviteRequest struct {
	// Whether to send an email automatically as part of the invite.
	SendEmail *bool       `json:"-" url:"sendEmail,omitempty"`
	Body      *UserInvite `json:"-" url:"-"`
}

func (u *UserInvitesCreateUserInviteRequest) UnmarshalJSON(data []byte) error {
	body := new(UserInvite)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.Body = body
	return nil
}

func (u *UserInvitesCreateUserInviteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

type UserInvitesListUserInvitesRequest struct {
	// The Organization ID.
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateUserInviteResponse struct {
	// The created User Invite.
	UserInvite *UserInvite `json:"userInvite,omitempty" url:"userInvite,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateUserInviteResponse) GetUserInvite() *UserInvite {
	if c == nil {
		return nil
	}
	return c.UserInvite
}

func (c *CreateUserInviteResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserInviteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserInviteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserInviteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserInviteResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteUserInviteResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserInviteResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserInviteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserInviteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserInviteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserInviteResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetUserInviteResponse struct {
	// The requested User Invite.
	UserInvite *UserInvite `json:"userInvite,omitempty" url:"userInvite,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserInviteResponse) GetUserInvite() *UserInvite {
	if g == nil {
		return nil
	}
	return g.UserInvite
}

func (g *GetUserInviteResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserInviteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserInviteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserInviteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserInviteResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListUserInvitesResponse struct {
	// A list of User Invites.
	UserInvites []*UserInvite `json:"userInvites,omitempty" url:"userInvites,omitempty"`
	// The pagination token for the next page of results. Empty if there is no next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUserInvitesResponse) GetUserInvites() []*UserInvite {
	if l == nil {
		return nil
	}
	return l.UserInvites
}

func (l *ListUserInvitesResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListUserInvitesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUserInvitesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUserInvitesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUserInvitesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUserInvitesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// UserInvite represents an invitation for a User to join an Organization.
type UserInvite struct {
	// The User Invite ID. Starts with `user_invite_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this User Invite belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the User Invite was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the User Invite was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// The invitee's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Indicates whether the invited User will have owner privileges in the
	//
	//	Organization.
	Owner *bool `json:"owner,omitempty" url:"owner,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserInvite) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UserInvite) GetOrganizationID() *string {
	if u == nil {
		return nil
	}
	return u.OrganizationID
}

func (u *UserInvite) GetCreateTime() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreateTime
}

func (u *UserInvite) GetUpdateTime() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdateTime
}

func (u *UserInvite) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserInvite) GetOwner() *bool {
	if u == nil {
		return nil
	}
	return u.Owner
}

func (u *UserInvite) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserInvite) UnmarshalJSON(data []byte) error {
	type embed UserInvite
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserInvite(unmarshaler.embed)
	u.CreateTime = unmarshaler.CreateTime.TimePtr()
	u.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserInvite) MarshalJSON() ([]byte, error) {
	type embed UserInvite
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*u),
		CreateTime: internal.NewOptionalDateTime(u.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(u.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (u *UserInvite) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
