// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type ScimApiKeysListScimapiKeysRequest struct {
	// The ID of the Organization.
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateScimapiKeyResponse struct {
	// The created SCIM API Key.
	ScimApiKey *ScimapiKey `json:"scimApiKey,omitempty" url:"scimApiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateScimapiKeyResponse) GetScimApiKey() *ScimapiKey {
	if c == nil {
		return nil
	}
	return c.ScimApiKey
}

func (c *CreateScimapiKeyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateScimapiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateScimapiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateScimapiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateScimapiKeyResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteScimapiKeyResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteScimapiKeyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteScimapiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteScimapiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteScimapiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteScimapiKeyResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetScimapiKeyResponse struct {
	// The requested SCIM API Key.
	ScimApiKey *ScimapiKey `json:"scimApiKey,omitempty" url:"scimApiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetScimapiKeyResponse) GetScimApiKey() *ScimapiKey {
	if g == nil {
		return nil
	}
	return g.ScimApiKey
}

func (g *GetScimapiKeyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetScimapiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetScimapiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetScimapiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetScimapiKeyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListScimapiKeysResponse struct {
	// A list of SCIM API Keys.
	ScimApiKeys []*ScimapiKey `json:"scimApiKeys,omitempty" url:"scimApiKeys,omitempty"`
	// The pagination token for the next page of results. Empty if there is no
	//
	//	next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListScimapiKeysResponse) GetScimApiKeys() []*ScimapiKey {
	if l == nil {
		return nil
	}
	return l.ScimApiKeys
}

func (l *ListScimapiKeysResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListScimapiKeysResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListScimapiKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListScimapiKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListScimapiKeysResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListScimapiKeysResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type RevokeScimapiKeyResponse struct {
	// The revoked SCIM API Key.
	ScimApiKey *ScimapiKey `json:"scimApiKey,omitempty" url:"scimApiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RevokeScimapiKeyResponse) GetScimApiKey() *ScimapiKey {
	if r == nil {
		return nil
	}
	return r.ScimApiKey
}

func (r *RevokeScimapiKeyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevokeScimapiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RevokeScimapiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevokeScimapiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokeScimapiKeyResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// SCIMAPIKey represents an API key for SCIM operations.
type ScimapiKey struct {
	// The SCIM API Key ID. Starts with `scim_api_key_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this SCIM API Key belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the SCIM API Key was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the SCIM API Key was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// A human-readable display name for this SCIM API Key.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// The secret token for this SCIM API Key.
	SecretToken *string `json:"secretToken,omitempty" url:"secretToken,omitempty"`
	// Whether this SCIM API Key is revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ScimapiKey) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *ScimapiKey) GetOrganizationID() *string {
	if s == nil {
		return nil
	}
	return s.OrganizationID
}

func (s *ScimapiKey) GetCreateTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreateTime
}

func (s *ScimapiKey) GetUpdateTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.UpdateTime
}

func (s *ScimapiKey) GetDisplayName() *string {
	if s == nil {
		return nil
	}
	return s.DisplayName
}

func (s *ScimapiKey) GetSecretToken() *string {
	if s == nil {
		return nil
	}
	return s.SecretToken
}

func (s *ScimapiKey) GetRevoked() *bool {
	if s == nil {
		return nil
	}
	return s.Revoked
}

func (s *ScimapiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScimapiKey) UnmarshalJSON(data []byte) error {
	type embed ScimapiKey
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ScimapiKey(unmarshaler.embed)
	s.CreateTime = unmarshaler.CreateTime.TimePtr()
	s.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScimapiKey) MarshalJSON() ([]byte, error) {
	type embed ScimapiKey
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*s),
		CreateTime: internal.NewOptionalDateTime(s.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(s.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (s *ScimapiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateScimapiKeyResponse struct {
	// The updated SCIM API Key.
	ScimApiKey *ScimapiKey `json:"scimApiKey,omitempty" url:"scimApiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateScimapiKeyResponse) GetScimApiKey() *ScimapiKey {
	if u == nil {
		return nil
	}
	return u.ScimApiKey
}

func (u *UpdateScimapiKeyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateScimapiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateScimapiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateScimapiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateScimapiKeyResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
