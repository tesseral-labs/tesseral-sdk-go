// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type SAMLConnectionsListSAMLConnectionsRequest struct {
	// The Organization ID.
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateSAMLConnectionResponse struct {
	// The created SAML Connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateSAMLConnectionResponse) GetSAMLConnection() *SAMLConnection {
	if c == nil {
		return nil
	}
	return c.SAMLConnection
}

func (c *CreateSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSAMLConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSAMLConnectionResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteSAMLConnectionResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteSAMLConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteSAMLConnectionResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetSAMLConnectionResponse struct {
	// The requested SAML Connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSAMLConnectionResponse) GetSAMLConnection() *SAMLConnection {
	if g == nil {
		return nil
	}
	return g.SAMLConnection
}

func (g *GetSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSAMLConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSAMLConnectionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListSAMLConnectionsResponse struct {
	// A list of SAML Connections.
	SAMLConnections []*SAMLConnection `json:"samlConnections,omitempty" url:"samlConnections,omitempty"`
	// The pagination token for the next page of results. Empty if there is no
	//
	//	next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListSAMLConnectionsResponse) GetSAMLConnections() []*SAMLConnection {
	if l == nil {
		return nil
	}
	return l.SAMLConnections
}

func (l *ListSAMLConnectionsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListSAMLConnectionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSAMLConnectionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSAMLConnectionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSAMLConnectionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSAMLConnectionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// SAMLConnection represents a SAML configuration for an Organization.
type SAMLConnection struct {
	// The SAML Connection ID. Starts with `saml_connection_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this SAML Connection belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the SAML Connection was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the SAML Connection was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// Whether this is the primary SAML Connection for the Organization.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// The Service Provider Assertion Consumer Service (ACS) URL.
	SpAcsURL *string `json:"spAcsUrl,omitempty" url:"spAcsUrl,omitempty"`
	// The Service Provider Entity ID.
	SpEntityID *string `json:"spEntityId,omitempty" url:"spEntityId,omitempty"`
	// The Identity Provider Redirect URL.
	IdpRedirectURL *string `json:"idpRedirectUrl,omitempty" url:"idpRedirectUrl,omitempty"`
	// The Identity Provider certificate, in PEM-encoded X.509 format.
	//
	//	Starts with `----BEGIN CERTIFICATE----`.
	IdpX509Certificate *string `json:"idpX509Certificate,omitempty" url:"idpX509Certificate,omitempty"`
	// The Identity Provider Entity ID.
	IdpEntityID *string `json:"idpEntityId,omitempty" url:"idpEntityId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SAMLConnection) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SAMLConnection) GetOrganizationID() *string {
	if s == nil {
		return nil
	}
	return s.OrganizationID
}

func (s *SAMLConnection) GetCreateTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreateTime
}

func (s *SAMLConnection) GetUpdateTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.UpdateTime
}

func (s *SAMLConnection) GetPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.Primary
}

func (s *SAMLConnection) GetSpAcsURL() *string {
	if s == nil {
		return nil
	}
	return s.SpAcsURL
}

func (s *SAMLConnection) GetSpEntityID() *string {
	if s == nil {
		return nil
	}
	return s.SpEntityID
}

func (s *SAMLConnection) GetIdpRedirectURL() *string {
	if s == nil {
		return nil
	}
	return s.IdpRedirectURL
}

func (s *SAMLConnection) GetIdpX509Certificate() *string {
	if s == nil {
		return nil
	}
	return s.IdpX509Certificate
}

func (s *SAMLConnection) GetIdpEntityID() *string {
	if s == nil {
		return nil
	}
	return s.IdpEntityID
}

func (s *SAMLConnection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SAMLConnection) UnmarshalJSON(data []byte) error {
	type embed SAMLConnection
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SAMLConnection(unmarshaler.embed)
	s.CreateTime = unmarshaler.CreateTime.TimePtr()
	s.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SAMLConnection) MarshalJSON() ([]byte, error) {
	type embed SAMLConnection
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*s),
		CreateTime: internal.NewOptionalDateTime(s.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(s.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (s *SAMLConnection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateSAMLConnectionResponse struct {
	// The updated SAML Connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateSAMLConnectionResponse) GetSAMLConnection() *SAMLConnection {
	if u == nil {
		return nil
	}
	return u.SAMLConnection
}

func (u *UpdateSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateSAMLConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSAMLConnectionResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
