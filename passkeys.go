// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type PasskeysListPasskeysRequest struct {
	// The ID of the User.
	UserID *string `json:"-" url:"userId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type DeletePasskeyResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletePasskeyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletePasskeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletePasskeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletePasskeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletePasskeyResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetPasskeyResponse struct {
	// The requested Passkey.
	Passkey *Passkey `json:"passkey,omitempty" url:"passkey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPasskeyResponse) GetPasskey() *Passkey {
	if g == nil {
		return nil
	}
	return g.Passkey
}

func (g *GetPasskeyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPasskeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPasskeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPasskeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPasskeyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListPasskeysResponse struct {
	// A list of Passkeys.
	Passkeys []*Passkey `json:"passkeys,omitempty" url:"passkeys,omitempty"`
	// The pagination token for the next page of results. Empty if there is no next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPasskeysResponse) GetPasskeys() []*Passkey {
	if l == nil {
		return nil
	}
	return l.Passkeys
}

func (l *ListPasskeysResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListPasskeysResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPasskeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPasskeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPasskeysResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPasskeysResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Passkey represents a WebAuthn public key credential registered by a User.
type Passkey struct {
	// The Passkey ID. Starts with `passkey_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The User this Passkey belongs to.
	UserID *string `json:"userId,omitempty" url:"userId,omitempty"`
	// The timestamp of when the Passkey was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// The timestamp of when the Passkey was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// Indicates whether the Passkey is disabled.
	Disabled *bool `json:"disabled,omitempty" url:"disabled,omitempty"`
	// The unique credential ID for the Passkey, as a binary value.
	CredentialID *string `json:"credentialId,omitempty" url:"credentialId,omitempty"`
	// The public key associated with the Passkey, in PEM-encoded PKIX format.
	//
	//	Starts with `-----BEGIN PUBLIC KEY-----`.
	PublicKeyPkix *string `json:"publicKeyPkix,omitempty" url:"publicKeyPkix,omitempty"`
	// The Authenticator Attestation GUID (AAGUID) for the Passkey.
	Aaguid *string `json:"aaguid,omitempty" url:"aaguid,omitempty"`
	// The relying party ID associated with the Passkey.
	RpID *string `json:"rpId,omitempty" url:"rpId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Passkey) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *Passkey) GetUserID() *string {
	if p == nil {
		return nil
	}
	return p.UserID
}

func (p *Passkey) GetCreateTime() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreateTime
}

func (p *Passkey) GetUpdateTime() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdateTime
}

func (p *Passkey) GetDisabled() *bool {
	if p == nil {
		return nil
	}
	return p.Disabled
}

func (p *Passkey) GetCredentialID() *string {
	if p == nil {
		return nil
	}
	return p.CredentialID
}

func (p *Passkey) GetPublicKeyPkix() *string {
	if p == nil {
		return nil
	}
	return p.PublicKeyPkix
}

func (p *Passkey) GetAaguid() *string {
	if p == nil {
		return nil
	}
	return p.Aaguid
}

func (p *Passkey) GetRpID() *string {
	if p == nil {
		return nil
	}
	return p.RpID
}

func (p *Passkey) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Passkey) UnmarshalJSON(data []byte) error {
	type embed Passkey
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Passkey(unmarshaler.embed)
	p.CreateTime = unmarshaler.CreateTime.TimePtr()
	p.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Passkey) MarshalJSON() ([]byte, error) {
	type embed Passkey
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*p),
		CreateTime: internal.NewOptionalDateTime(p.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(p.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (p *Passkey) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdatePasskeyResponse struct {
	// The updated Passkey.
	Passkey *Passkey `json:"passkey,omitempty" url:"passkey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePasskeyResponse) GetPasskey() *Passkey {
	if u == nil {
		return nil
	}
	return u.Passkey
}

func (u *UpdatePasskeyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePasskeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePasskeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePasskeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePasskeyResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
