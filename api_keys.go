// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type AuthenticateAPIKeyRequest struct {
	SecretToken *string `json:"secretToken,omitempty" url:"-"`
}

type CreateAPIKeyRequest struct {
	APIKey *APIKey `json:"apiKey,omitempty" url:"-"`
}

type APIKeysListAPIKeysRequest struct {
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	PageToken      *string `json:"-" url:"pageToken,omitempty"`
}

type UpdateAPIKeyRequest struct {
	UpdateAPIKeyRequestID *string `json:"id,omitempty" url:"-"`
	APIKey                *APIKey `json:"apiKey,omitempty" url:"-"`
}

type APIKey struct {
	// The API Key ID. Starts with `api_key_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this API Key belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the API Key was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the API Key was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// The expire time of the API Key.
	ExpireTime *time.Time `json:"expireTime,omitempty" url:"expireTime,omitempty"`
	// A human-readable display name for this API Key.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// The secret token for this API Key.
	SecretToken *string `json:"secretToken,omitempty" url:"secretToken,omitempty"`
	// The secret token suffix for this API Key.
	SecretTokenSuffix *string `json:"secretTokenSuffix,omitempty" url:"secretTokenSuffix,omitempty"`
	// Whether this API Key is revoked.
	Revoked *bool `json:"revoked,omitempty" url:"revoked,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *APIKey) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *APIKey) GetOrganizationID() *string {
	if a == nil {
		return nil
	}
	return a.OrganizationID
}

func (a *APIKey) GetCreateTime() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreateTime
}

func (a *APIKey) GetUpdateTime() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdateTime
}

func (a *APIKey) GetExpireTime() *time.Time {
	if a == nil {
		return nil
	}
	return a.ExpireTime
}

func (a *APIKey) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *APIKey) GetSecretToken() *string {
	if a == nil {
		return nil
	}
	return a.SecretToken
}

func (a *APIKey) GetSecretTokenSuffix() *string {
	if a == nil {
		return nil
	}
	return a.SecretTokenSuffix
}

func (a *APIKey) GetRevoked() *bool {
	if a == nil {
		return nil
	}
	return a.Revoked
}

func (a *APIKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIKey) UnmarshalJSON(data []byte) error {
	type embed APIKey
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
		ExpireTime *internal.DateTime `json:"expireTime,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = APIKey(unmarshaler.embed)
	a.CreateTime = unmarshaler.CreateTime.TimePtr()
	a.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	a.ExpireTime = unmarshaler.ExpireTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIKey) MarshalJSON() ([]byte, error) {
	type embed APIKey
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
		ExpireTime *internal.DateTime `json:"expireTime,omitempty"`
	}{
		embed:      embed(*a),
		CreateTime: internal.NewOptionalDateTime(a.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(a.UpdateTime),
		ExpireTime: internal.NewOptionalDateTime(a.ExpireTime),
	}
	return json.Marshal(marshaler)
}

func (a *APIKey) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthenticateAPIKeyResponse struct {
	APIKeyID       *string  `json:"apiKeyId,omitempty" url:"apiKeyId,omitempty"`
	OrganizationID *string  `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	Actions        []string `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthenticateAPIKeyResponse) GetAPIKeyID() *string {
	if a == nil {
		return nil
	}
	return a.APIKeyID
}

func (a *AuthenticateAPIKeyResponse) GetOrganizationID() *string {
	if a == nil {
		return nil
	}
	return a.OrganizationID
}

func (a *AuthenticateAPIKeyResponse) GetActions() []string {
	if a == nil {
		return nil
	}
	return a.Actions
}

func (a *AuthenticateAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthenticateAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthenticateAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthenticateAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthenticateAPIKeyResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateAPIKeyResponse struct {
	APIKey *APIKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateAPIKeyResponse) GetAPIKey() *APIKey {
	if c == nil {
		return nil
	}
	return c.APIKey
}

func (c *CreateAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateAPIKeyResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteAPIKeyResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteAPIKeyResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetAPIKeyResponse struct {
	APIKey *APIKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAPIKeyResponse) GetAPIKey() *APIKey {
	if g == nil {
		return nil
	}
	return g.APIKey
}

func (g *GetAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAPIKeyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListAPIKeysResponse struct {
	APIKeys       []*APIKey `json:"apiKeys,omitempty" url:"apiKeys,omitempty"`
	NextPageToken *string   `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAPIKeysResponse) GetAPIKeys() []*APIKey {
	if l == nil {
		return nil
	}
	return l.APIKeys
}

func (l *ListAPIKeysResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListAPIKeysResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAPIKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAPIKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAPIKeysResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAPIKeysResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type RevokeAPIKeyResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RevokeAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevokeAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RevokeAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevokeAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokeAPIKeyResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateAPIKeyResponse struct {
	APIKey *APIKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateAPIKeyResponse) GetAPIKey() *APIKey {
	if u == nil {
		return nil
	}
	return u.APIKey
}

func (u *UpdateAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAPIKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAPIKeyResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
