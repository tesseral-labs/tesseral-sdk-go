// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
)

// The claims encoded in an Access Token.
type AccessTokenClaims struct {
	// Will always be of the form "https://project-xxx.tesseral.app", where
	//
	//	"project-xxx" is your Project ID.
	Iss string `json:"iss" url:"iss"`
	// Will always be equal to the `user.id` claim.
	Sub string `json:"sub" url:"sub"`
	// Will always be equal to the `iss` claim.
	Aud string `json:"aud" url:"aud"`
	// When this Access Token expires, in seconds since the unix epoch.
	Exp float64 `json:"exp" url:"exp"`
	// When this Access Token was issued, in seconds since the unix epoch.
	Nbf float64 `json:"nbf" url:"nbf"`
	// Will always be equal to the `nbf` claim.
	Iat float64 `json:"iat" url:"iat"`
	// The Organization the User is logged into.
	Organization *AccessTokenOrganization `json:"organization,omitempty" url:"organization,omitempty"`
	// The User that's logged in.
	User *AccessTokenUser `json:"user,omitempty" url:"user,omitempty"`
	// The user's current Session.
	Session *AccessTokenSession `json:"session,omitempty" url:"session,omitempty"`
	// If this is an impersonated Session, this contains information about who on
	//
	//	your staff is impersonating the user.
	Impersonator *AccessTokenImpersonator `json:"impersonator,omitempty" url:"impersonator,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessTokenClaims) GetIss() string {
	if a == nil {
		return ""
	}
	return a.Iss
}

func (a *AccessTokenClaims) GetSub() string {
	if a == nil {
		return ""
	}
	return a.Sub
}

func (a *AccessTokenClaims) GetAud() string {
	if a == nil {
		return ""
	}
	return a.Aud
}

func (a *AccessTokenClaims) GetExp() float64 {
	if a == nil {
		return 0
	}
	return a.Exp
}

func (a *AccessTokenClaims) GetNbf() float64 {
	if a == nil {
		return 0
	}
	return a.Nbf
}

func (a *AccessTokenClaims) GetIat() float64 {
	if a == nil {
		return 0
	}
	return a.Iat
}

func (a *AccessTokenClaims) GetOrganization() *AccessTokenOrganization {
	if a == nil {
		return nil
	}
	return a.Organization
}

func (a *AccessTokenClaims) GetUser() *AccessTokenUser {
	if a == nil {
		return nil
	}
	return a.User
}

func (a *AccessTokenClaims) GetSession() *AccessTokenSession {
	if a == nil {
		return nil
	}
	return a.Session
}

func (a *AccessTokenClaims) GetImpersonator() *AccessTokenImpersonator {
	if a == nil {
		return nil
	}
	return a.Impersonator
}

func (a *AccessTokenClaims) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessTokenClaims) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessTokenClaims
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessTokenClaims(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessTokenClaims) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Information in an Access Token about who is impersonating the User.
type AccessTokenImpersonator struct {
	// The email address of the individual on your staff impersonating the User.
	Email string `json:"email" url:"email"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessTokenImpersonator) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *AccessTokenImpersonator) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessTokenImpersonator) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessTokenImpersonator
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessTokenImpersonator(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessTokenImpersonator) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Information in an Access Token about the Organization the User is logged
//
//	into.
type AccessTokenOrganization struct {
	// The Organization's ID.
	ID string `json:"id" url:"id"`
	// The Organization's display name.
	DisplayName string `json:"displayName" url:"displayName"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessTokenOrganization) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AccessTokenOrganization) GetDisplayName() string {
	if a == nil {
		return ""
	}
	return a.DisplayName
}

func (a *AccessTokenOrganization) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessTokenOrganization) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessTokenOrganization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessTokenOrganization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessTokenOrganization) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Information in an Access Token about the current Session.
type AccessTokenSession struct {
	// The Session ID.
	ID string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessTokenSession) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AccessTokenSession) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessTokenSession) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessTokenSession
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessTokenSession(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessTokenSession) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Information in an Access Token about the logged-in User.
type AccessTokenUser struct {
	// The User's ID.
	ID string `json:"id" url:"id"`
	// The User's email.
	Email string `json:"email" url:"email"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessTokenUser) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AccessTokenUser) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *AccessTokenUser) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessTokenUser) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessTokenUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessTokenUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessTokenUser) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An error returned from Tesseral.
type APIError struct {
	// A developer-facing error message, such as "not_found". These are stable, and you can develop code that matches against them.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Additional details about this error.
	Details []interface{} `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *APIError) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *APIError) GetDetails() []interface{} {
	if a == nil {
		return nil
	}
	return a.Details
}

func (a *APIError) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIError) UnmarshalJSON(data []byte) error {
	type unmarshaler APIError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = APIError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIError) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An error returned from a Tesseral API.
type ErrorDetail struct {
	// A human-friendly description for the error. May change at any time.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// A link to the documentation about the error. May change at any time.
	DocsLink *string `json:"docsLink,omitempty" url:"docsLink,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorDetail) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *ErrorDetail) GetDocsLink() *string {
	if e == nil {
		return nil
	}
	return e.DocsLink
}

func (e *ErrorDetail) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorDetail) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
