// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type RolesListRolesRequest struct {
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	PageToken      *string `json:"-" url:"pageToken,omitempty"`
}

type CreateRoleResponse struct {
	Role *Role `json:"role,omitempty" url:"role,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateRoleResponse) GetRole() *Role {
	if c == nil {
		return nil
	}
	return c.Role
}

func (c *CreateRoleResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateRoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateRoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateRoleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateRoleResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteRoleResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteRoleResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteRoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteRoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteRoleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteRoleResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetRoleResponse struct {
	Role *Role `json:"role,omitempty" url:"role,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetRoleResponse) GetRole() *Role {
	if g == nil {
		return nil
	}
	return g.Role
}

func (g *GetRoleResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetRoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetRoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetRoleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetRoleResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListRolesResponse struct {
	Roles         []*Role `json:"roles,omitempty" url:"roles,omitempty"`
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRolesResponse) GetRoles() []*Role {
	if l == nil {
		return nil
	}
	return l.Roles
}

func (l *ListRolesResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListRolesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRolesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRolesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRolesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRolesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Role represents a logical grouping of permissions that Users may have.
type Role struct {
	// The Role ID. Starts with `role_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this Role belongs to, if any.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the Role was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the Role was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// A human-readable display name for this Role.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// A human-readable description of the Role.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The names of the Actions associated with this Role.
	Actions []string `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Role) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *Role) GetOrganizationID() *string {
	if r == nil {
		return nil
	}
	return r.OrganizationID
}

func (r *Role) GetCreateTime() *time.Time {
	if r == nil {
		return nil
	}
	return r.CreateTime
}

func (r *Role) GetUpdateTime() *time.Time {
	if r == nil {
		return nil
	}
	return r.UpdateTime
}

func (r *Role) GetDisplayName() *string {
	if r == nil {
		return nil
	}
	return r.DisplayName
}

func (r *Role) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *Role) GetActions() []string {
	if r == nil {
		return nil
	}
	return r.Actions
}

func (r *Role) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Role) UnmarshalJSON(data []byte) error {
	type embed Role
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Role(unmarshaler.embed)
	r.CreateTime = unmarshaler.CreateTime.TimePtr()
	r.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Role) MarshalJSON() ([]byte, error) {
	type embed Role
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*r),
		CreateTime: internal.NewOptionalDateTime(r.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(r.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (r *Role) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateRoleResponse struct {
	Role *Role `json:"role,omitempty" url:"role,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateRoleResponse) GetRole() *Role {
	if u == nil {
		return nil
	}
	return u.Role
}

func (u *UpdateRoleResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateRoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRoleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRoleResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
