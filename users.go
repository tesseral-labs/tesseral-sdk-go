// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type UsersListUsersRequest struct {
	// The Organization ID.
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateUserResponse struct {
	// The created User.
	User *User `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateUserResponse) GetUser() *User {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *CreateUserResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteUserResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetUserResponse struct {
	// The requested User.
	User *User `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserResponse) GetUser() *User {
	if g == nil {
		return nil
	}
	return g.User
}

func (g *GetUserResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListUsersResponse struct {
	// A list of Users.
	Users []*User `json:"users,omitempty" url:"users,omitempty"`
	// The pagination token for the next page of results. Empty if there is no next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUsersResponse) GetUsers() []*User {
	if l == nil {
		return nil
	}
	return l.Users
}

func (l *ListUsersResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListUsersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateUserResponse struct {
	// The updated User.
	User *User `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateUserResponse) GetUser() *User {
	if u == nil {
		return nil
	}
	return u.User
}

func (u *UpdateUserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// A User represents an individual working for one of your corporate customers.
type User struct {
	// The User ID. Starts with `user_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this User belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// The User's email address.
	//
	//	This email is verified and unique within the Organization. Two Users in
	//	different Organizations may have the same email.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// When the User was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the User was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// Whether the User is an owner of their Organization.
	Owner *bool `json:"owner,omitempty" url:"owner,omitempty"`
	// The Google User ID, if the User has ever logged in with Google.
	GoogleUserID *string `json:"googleUserId,omitempty" url:"googleUserId,omitempty"`
	// The Microsoft User ID, if the User has ever logged in with Microsoft.
	MicrosoftUserID *string `json:"microsoftUserId,omitempty" url:"microsoftUserId,omitempty"`
	// Whether the User has an authenticator app set up.
	HasAuthenticatorApp *bool `json:"hasAuthenticatorApp,omitempty" url:"hasAuthenticatorApp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *User) GetOrganizationID() *string {
	if u == nil {
		return nil
	}
	return u.OrganizationID
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetCreateTime() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreateTime
}

func (u *User) GetUpdateTime() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdateTime
}

func (u *User) GetOwner() *bool {
	if u == nil {
		return nil
	}
	return u.Owner
}

func (u *User) GetGoogleUserID() *string {
	if u == nil {
		return nil
	}
	return u.GoogleUserID
}

func (u *User) GetMicrosoftUserID() *string {
	if u == nil {
		return nil
	}
	return u.MicrosoftUserID
}

func (u *User) GetHasAuthenticatorApp() *bool {
	if u == nil {
		return nil
	}
	return u.HasAuthenticatorApp
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	u.CreateTime = unmarshaler.CreateTime.TimePtr()
	u.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*u),
		CreateTime: internal.NewOptionalDateTime(u.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(u.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
