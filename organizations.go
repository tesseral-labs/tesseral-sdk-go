// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type OrganizationsListOrganizationsRequest struct {
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateOrganizationResponse struct {
	// The Organization to create.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateOrganizationResponse) GetOrganization() *Organization {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CreateOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrganizationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteOrganizationResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteOrganizationResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetOrganizationDomainsResponse struct {
	// The requested Organization Domains.
	OrganizationDomains *OrganizationDomains `json:"organizationDomains,omitempty" url:"organizationDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationDomainsResponse) GetOrganizationDomains() *OrganizationDomains {
	if g == nil {
		return nil
	}
	return g.OrganizationDomains
}

func (g *GetOrganizationDomainsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationDomainsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrganizationGoogleHostedDomainsResponse struct {
	// The Organization's Google Hosted Domains.
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `json:"organizationGoogleHostedDomains,omitempty" url:"organizationGoogleHostedDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if g == nil {
		return nil
	}
	return g.OrganizationGoogleHostedDomains
}

func (g *GetOrganizationGoogleHostedDomainsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationGoogleHostedDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationGoogleHostedDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationGoogleHostedDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationGoogleHostedDomainsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrganizationMicrosoftTenantIDsResponse struct {
	// The Organization's Microsoft Tenant IDs.
	OrganizationMicrosoftTenantIDs *OrganizationMicrosoftTenantIDs `json:"organizationMicrosoftTenantIds,omitempty" url:"organizationMicrosoftTenantIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIDs() *OrganizationMicrosoftTenantIDs {
	if g == nil {
		return nil
	}
	return g.OrganizationMicrosoftTenantIDs
}

func (g *GetOrganizationMicrosoftTenantIDsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationMicrosoftTenantIDsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationMicrosoftTenantIDsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationMicrosoftTenantIDsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationMicrosoftTenantIDsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrganizationResponse struct {
	// The requested Organization.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrganizationResponse) GetOrganization() *Organization {
	if g == nil {
		return nil
	}
	return g.Organization
}

func (g *GetOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListOrganizationsResponse struct {
	// A list of Organizations.
	Organizations []*Organization `json:"organizations,omitempty" url:"organizations,omitempty"`
	// The pagination token for the next page of results. Empty if there is no
	//
	//	next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationsResponse) GetOrganizations() []*Organization {
	if l == nil {
		return nil
	}
	return l.Organizations
}

func (l *ListOrganizationsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListOrganizationsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// An Organization represents one of your corporate customers.
type Organization struct {
	// The Organization ID. Starts with `org_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// A human-friendly name for the Organization.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// When the Organization was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the Organization was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// Whether the Organization supports "Log in with Google".
	LogInWithGoogle *bool `json:"logInWithGoogle,omitempty" url:"logInWithGoogle,omitempty"`
	// Whether the Organization supports "Log in with Microsoft".
	LogInWithMicrosoft *bool `json:"logInWithMicrosoft,omitempty" url:"logInWithMicrosoft,omitempty"`
	// Whether the Organization supports "Log in with email".
	LogInWithEmail *bool `json:"logInWithEmail,omitempty" url:"logInWithEmail,omitempty"`
	// Whether the Organization supports "Log in with password".
	LogInWithPassword *bool `json:"logInWithPassword,omitempty" url:"logInWithPassword,omitempty"`
	// Whether the Organization supports "Log in with SAML".
	LogInWithSAML *bool `json:"logInWithSaml,omitempty" url:"logInWithSaml,omitempty"`
	// Whether the Organization supports authenticator apps as a secondary auth factor.
	LogInWithAuthenticatorApp *bool `json:"logInWithAuthenticatorApp,omitempty" url:"logInWithAuthenticatorApp,omitempty"`
	// Whether the Organization supports passkeys as a secondary auth factor.
	LogInWithPasskey *bool `json:"logInWithPasskey,omitempty" url:"logInWithPasskey,omitempty"`
	// Whether the Organization requires a secondary auth factor.
	RequireMfa *bool `json:"requireMfa,omitempty" url:"requireMfa,omitempty"`
	// Whether the Organization has SCIM enabled.
	SCIMEnabled *bool `json:"scimEnabled,omitempty" url:"scimEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *Organization) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Organization) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Organization) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Organization) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

func (o *Organization) GetLogInWithGoogle() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithGoogle
}

func (o *Organization) GetLogInWithMicrosoft() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithMicrosoft
}

func (o *Organization) GetLogInWithEmail() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithEmail
}

func (o *Organization) GetLogInWithPassword() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithPassword
}

func (o *Organization) GetLogInWithSAML() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithSAML
}

func (o *Organization) GetLogInWithAuthenticatorApp() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithAuthenticatorApp
}

func (o *Organization) GetLogInWithPasskey() *bool {
	if o == nil {
		return nil
	}
	return o.LogInWithPasskey
}

func (o *Organization) GetRequireMfa() *bool {
	if o == nil {
		return nil
	}
	return o.RequireMfa
}

func (o *Organization) GetSCIMEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.SCIMEnabled
}

func (o *Organization) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Organization) UnmarshalJSON(data []byte) error {
	type embed Organization
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = Organization(unmarshaler.embed)
	o.CreateTime = unmarshaler.CreateTime.TimePtr()
	o.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Organization) MarshalJSON() ([]byte, error) {
	type embed Organization
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*o),
		CreateTime: internal.NewOptionalDateTime(o.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(o.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (o *Organization) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OrganizationDomains defines the domains associated with an Organization.
type OrganizationDomains struct {
	// The ID of the Organization.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// A list of domains associated with the organization.
	//
	//	When an Organization uses SAML or SCIM, only emails from this list are
	//	permitted.
	Domains []string `json:"domains,omitempty" url:"domains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationDomains) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *OrganizationDomains) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *OrganizationDomains) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationDomains) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationDomains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationDomains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationDomains) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OrganizationGoogleHostedDomains represents the Google Hosted Domains ("HDs")
//
//	associated with an Organization.
type OrganizationGoogleHostedDomains struct {
	// The ID of the Organization.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// A list of Google-hosted domains associated with the organization.
	//
	//	These values correspond to Google OAuth `hd` claims:
	//
	//	https://developers.google.com/identity/openid-connect/openid-connect#obtainuserinfo
	GoogleHostedDomains []string `json:"googleHostedDomains,omitempty" url:"googleHostedDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationGoogleHostedDomains) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *OrganizationGoogleHostedDomains) GetGoogleHostedDomains() []string {
	if o == nil {
		return nil
	}
	return o.GoogleHostedDomains
}

func (o *OrganizationGoogleHostedDomains) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationGoogleHostedDomains) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationGoogleHostedDomains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationGoogleHostedDomains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationGoogleHostedDomains) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OrganizationMicrosoftTenantIDs represents the Microsoft Tenant IDs ("TIDs")
//
//	associated with an Organization.
type OrganizationMicrosoftTenantIDs struct {
	// The ID of the Organization.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// A list of Microsoft Tenant IDs associated with the organization.
	//
	//	These values correspond to Microsoft OAuth `tid` claims:
	//
	//	https://learn.microsoft.com/en-us/entra/identity-platform/id-token-claims-reference
	MicrosoftTenantIDs []string `json:"microsoftTenantIds,omitempty" url:"microsoftTenantIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationMicrosoftTenantIDs) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *OrganizationMicrosoftTenantIDs) GetMicrosoftTenantIDs() []string {
	if o == nil {
		return nil
	}
	return o.MicrosoftTenantIDs
}

func (o *OrganizationMicrosoftTenantIDs) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationMicrosoftTenantIDs) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationMicrosoftTenantIDs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationMicrosoftTenantIDs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationMicrosoftTenantIDs) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type UpdateOrganizationDomainsResponse struct {
	// The updated Organization Domains.
	OrganizationDomains *OrganizationDomains `json:"organizationDomains,omitempty" url:"organizationDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOrganizationDomainsResponse) GetOrganizationDomains() *OrganizationDomains {
	if u == nil {
		return nil
	}
	return u.OrganizationDomains
}

func (u *UpdateOrganizationDomainsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationDomainsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateOrganizationGoogleHostedDomainsResponse struct {
	// The updated Google Hosted Domains for the Organization.
	OrganizationGoogleHostedDomains *OrganizationGoogleHostedDomains `json:"organizationGoogleHostedDomains,omitempty" url:"organizationGoogleHostedDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOrganizationGoogleHostedDomainsResponse) GetOrganizationGoogleHostedDomains() *OrganizationGoogleHostedDomains {
	if u == nil {
		return nil
	}
	return u.OrganizationGoogleHostedDomains
}

func (u *UpdateOrganizationGoogleHostedDomainsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationGoogleHostedDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationGoogleHostedDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationGoogleHostedDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationGoogleHostedDomainsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateOrganizationMicrosoftTenantIDsResponse struct {
	// The updated Microsoft Tenant IDs for the Organization.
	OrganizationMicrosoftTenantIDs *OrganizationMicrosoftTenantIDs `json:"organizationMicrosoftTenantIds,omitempty" url:"organizationMicrosoftTenantIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOrganizationMicrosoftTenantIDsResponse) GetOrganizationMicrosoftTenantIDs() *OrganizationMicrosoftTenantIDs {
	if u == nil {
		return nil
	}
	return u.OrganizationMicrosoftTenantIDs
}

func (u *UpdateOrganizationMicrosoftTenantIDsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationMicrosoftTenantIDsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationMicrosoftTenantIDsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationMicrosoftTenantIDsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationMicrosoftTenantIDsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateOrganizationResponse struct {
	// The updated Organization.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOrganizationResponse) GetOrganization() *Organization {
	if u == nil {
		return nil
	}
	return u.Organization
}

func (u *UpdateOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
