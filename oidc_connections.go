// This file was auto-generated by Fern from our API Definition.

package tesseral

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	time "time"
)

type OidcConnectionsListOidcConnectionsRequest struct {
	// The Organization ID.
	OrganizationID *string `json:"-" url:"organizationId,omitempty"`
	// A pagination token. Leave empty to get the first page of results.
	PageToken *string `json:"-" url:"pageToken,omitempty"`
}

type CreateOidcConnectionResponse struct {
	// The created OIDC Connection.
	OidcConnection *OidcConnection `json:"oidcConnection,omitempty" url:"oidcConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateOidcConnectionResponse) GetOidcConnection() *OidcConnection {
	if c == nil {
		return nil
	}
	return c.OidcConnection
}

func (c *CreateOidcConnectionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOidcConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOidcConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOidcConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOidcConnectionResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteOidcConnectionResponse struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteOidcConnectionResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteOidcConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteOidcConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteOidcConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteOidcConnectionResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetOidcConnectionResponse struct {
	// The requested OIDC Connection.
	OidcConnection *OidcConnection `json:"oidcConnection,omitempty" url:"oidcConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOidcConnectionResponse) GetOidcConnection() *OidcConnection {
	if g == nil {
		return nil
	}
	return g.OidcConnection
}

func (g *GetOidcConnectionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOidcConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOidcConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOidcConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOidcConnectionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListOidcConnectionsResponse struct {
	// A list of OIDC Connections.
	OidcConnections []*OidcConnection `json:"oidcConnections,omitempty" url:"oidcConnections,omitempty"`
	// The pagination token for the next page of results. Empty if there is no
	//
	//	next page.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOidcConnectionsResponse) GetOidcConnections() []*OidcConnection {
	if l == nil {
		return nil
	}
	return l.OidcConnections
}

func (l *ListOidcConnectionsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListOidcConnectionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOidcConnectionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOidcConnectionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOidcConnectionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOidcConnectionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// OIDCConnection represents an OpenID Connect configuration for an Organization.
type OidcConnection struct {
	// The OIDC Connection ID. Starts with `oidc_connection_...`.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Organization this OIDC Connection belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// When the OIDC Connection was created.
	CreateTime *time.Time `json:"createTime,omitempty" url:"createTime,omitempty"`
	// When the OIDC Connection was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty" url:"updateTime,omitempty"`
	// Whether this is the primary OIDC Connection for the Organization.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// The OIDC Provider's configuration URL.
	ConfigurationURL *string `json:"configurationUrl,omitempty" url:"configurationUrl,omitempty"`
	// The OIDC Provider's Client ID.
	ClientID *string `json:"clientId,omitempty" url:"clientId,omitempty"`
	// The OIDC Provider's Client Secret.
	//
	//	This field is write-only.
	ClientSecret *string `json:"clientSecret,omitempty" url:"clientSecret,omitempty"`
	// The OIDC Provider's redirect URI.
	RedirectURI *string `json:"redirectUri,omitempty" url:"redirectUri,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OidcConnection) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OidcConnection) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *OidcConnection) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *OidcConnection) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

func (o *OidcConnection) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *OidcConnection) GetConfigurationURL() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationURL
}

func (o *OidcConnection) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *OidcConnection) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *OidcConnection) GetRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURI
}

func (o *OidcConnection) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OidcConnection) UnmarshalJSON(data []byte) error {
	type embed OidcConnection
	var unmarshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OidcConnection(unmarshaler.embed)
	o.CreateTime = unmarshaler.CreateTime.TimePtr()
	o.UpdateTime = unmarshaler.UpdateTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OidcConnection) MarshalJSON() ([]byte, error) {
	type embed OidcConnection
	var marshaler = struct {
		embed
		CreateTime *internal.DateTime `json:"createTime,omitempty"`
		UpdateTime *internal.DateTime `json:"updateTime,omitempty"`
	}{
		embed:      embed(*o),
		CreateTime: internal.NewOptionalDateTime(o.CreateTime),
		UpdateTime: internal.NewOptionalDateTime(o.UpdateTime),
	}
	return json.Marshal(marshaler)
}

func (o *OidcConnection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type UpdateOidcConnectionResponse struct {
	// The updated OIDC Connection.
	OidcConnection *OidcConnection `json:"oidcConnection,omitempty" url:"oidcConnection,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateOidcConnectionResponse) GetOidcConnection() *OidcConnection {
	if u == nil {
		return nil
	}
	return u.OidcConnection
}

func (u *UpdateOidcConnectionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOidcConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOidcConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOidcConnectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOidcConnectionResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
