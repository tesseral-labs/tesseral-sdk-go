// This file was auto-generated by Fern from our API Definition.

package sessions

import (
	context "context"
	tesseralsdkgo "github.com/tesseral-labs/tesseral-sdk-go"
	core "github.com/tesseral-labs/tesseral-sdk-go/core"
	internal "github.com/tesseral-labs/tesseral-sdk-go/internal"
	option "github.com/tesseral-labs/tesseral-sdk-go/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.BackendAPIKey == "" {
		options.BackendAPIKey = os.Getenv("TESSERAL_BACKEND_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// List Sessions.
func (c *Client) ListSessions(
	ctx context.Context,
	request *tesseralsdkgo.SessionsListSessionsRequest,
	opts ...option.RequestOption,
) (*tesseralsdkgo.ListSessionsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.tesseral.com",
	)
	endpointURL := baseURL + "/v1/sessions"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &tesseralsdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &tesseralsdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &tesseralsdkgo.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &tesseralsdkgo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *tesseralsdkgo.ListSessionsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a Session.
func (c *Client) GetSession(
	ctx context.Context,
	// The Session ID.
	id string,
	opts ...option.RequestOption,
) (*tesseralsdkgo.GetSessionResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.tesseral.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/sessions/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &tesseralsdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &tesseralsdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &tesseralsdkgo.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &tesseralsdkgo.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *tesseralsdkgo.GetSessionResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
